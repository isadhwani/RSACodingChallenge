package ShamirSharing;

import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.util.Base64;
import java.util.Scanner;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;

import static org.junit.Assert.*;

/**
 * A class for testing a Shard
 */
public class ShardTest {

  @Test
  public void testCreateInvalidShard() {
    try {
      ShamirProgram.Shard shard1 = new ShamirProgram.Shard(3, null);
      fail("Expected exception did not occur");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Value cannot be null");
    }
  }

  @Test
  public void testCreateValidShards() {
    ShamirProgram.Shard shard1 = new ShamirProgram.Shard(5, new BigInteger("25"));
    ShamirProgram.Shard shard2 = new ShamirProgram.Shard(1, new BigInteger("5"));
  }

  @Test
  public void testGetValue() {
    ShamirProgram.Shard shard1 = new ShamirProgram.Shard(5, new BigInteger("25"));
    ShamirProgram.Shard shard2 = new ShamirProgram.Shard(1, new BigInteger("5"));

    assertEquals(shard1.getValue(), new BigInteger("25"));
    assertEquals(shard2.getValue(), new BigInteger("5"));
  }

  @Test
  public void testGetInput() {
    ShamirProgram.Shard shard1 = new ShamirProgram.Shard(5, new BigInteger("25"));
    ShamirProgram.Shard shard2 = new ShamirProgram.Shard(1, new BigInteger("5"));

    assertEquals(shard1.getInput(), 5);
    assertEquals(shard2.getInput(), 1);
  }

  @Test
  public void testDecodeWithShards() throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, UnsupportedEncodingException {
    ShamirProgram.Shamir sham = new ShamirProgram.Shamir("SecretSecret", 5,2);

    sham.generateShamirShares();

    ShamirProgram.Shard shard1 = new ShamirProgram.Shard(readFromFile("Shard[1].TXT"));
    ShamirProgram.Shard shard2 = new ShamirProgram.Shard(readFromFile("Shard[2].TXT"));
    PrivateKey key = shard1.calcPrivateKey(shard2);

    assertEquals(sham.priv, key);

    // Shows that using the original key is the same as the key created
    System.out.println("Decoded word: " + sham.decode(key));
    assertEquals(sham.decode(key), sham.decode(sham.priv));
  }

  @Test
  public void testDecodeShardsAsStrings() throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, IOException {
    ShamirProgram.Shamir sham = new ShamirProgram.Shamir("heyWhatUp", 5, 2);

    sham.generateShamirShares();
    ShamirProgram.Shard shard1 = new ShamirProgram.Shard(readFromFile("Shard[2].TXT"));
    ShamirProgram.Shard shard2 = new ShamirProgram.Shard(readFromFile("Shard[4].TXT"));
    //Shard shard1 = new Shard("43 8357763705572707370453949153544724745419984208556352000574003108256741110300933259184634936905088826422259086347330666416914309714219077528535000847445268843002964149703025601691482331921738106817305726236100660500332506333027983239243912067655536827151475950568476837975662824299303453685905148982656635844835302437809334199565486847832912910105417810252730352340754437433890686716634148541316116437398844056594388974943451252693298826461268195957995233204726580360518120722831475047238848520121974861190434089882052536062527552074746737392878272219813609847822641000374148713270431417107701343460532465568376598334041181827015065533900044557011648000528466905170826934678563716604346912017910948004696319141870114526815224456432832395889026710524811740032711882587929506973642267574179895747116940093482230760556115941144091916446754587172633329715568070657689791394343901778058499681994404972002585617567896538181136785927626437478787592006430142954410490692356785698559644321807726032253269544115218475243205442713311676969122666537145560084133862349562008440091733151012449851234288766580473174731625512554546902039193169769111453131416686283066149476328354180826442038532515883648602007655712172395541266432552137033708105602341004365051367422036097209403287883642447893808711637303918526911977444016340845604094148950540134588310847971891118813007073047958837518038702667255496843175440515751387220019188888225509081974873522272690849139199089521105774909974989857689914560595659621869062248419185753051018250096381690265047817067556811134058718664474519626520018419191373814294102382720688029185564666122404247839203613263102945779229436404198268095312784134780858344009303474538424982154356049247754822330779945259974277064815282302372327351526104690184978151628756578431233799741186072154073689492048623644349866103655713004780409117627629375452837004753071965892450543600792469074918268320684205033256284578160824914542614450269580818170474593429375828822006192273266663523034559465562060807967312517415156390672400546512888220613792507996027216019879538800195217291178027173789052816086826633515495980843918512177698627549182066630254157104243369196620802425007156719689384043327409536753514309870021147455146312470256426581714508302065650360885005652617293190085224180430541462497495090592940010614280275548506280968513721693738270892407374429846492773182142263411316319092417204720825325244407939394255691327709106967322700584977157213997356556294143385530120052828671122008997067708458637236816128384460184662369223512719505505016469333858807697332636186759779393508557343193806907428483241581545959400229395914541886207490106414273576827573080643166134704895035783625713605327775830056823653831029333772154861764452648631603373403394632013230845479310897257218879778407928185843997708108573232900635390109322867176481198898973343102903255264301769533051237822685230013537607190337370617815152297549854214378453640019015");
    //Shard shard2 = new Shard("37 8357763705572707370453949153544724745419984208556352000574003108256741110300933259184634936905088826422259086347330666416914309714219077528535000847445268843002964149703025601691482331921738106817305726236100660500332506333027983239243912067655536827151475950568476837975662824299303453685905148982656635844835302437809334199565486847832912910105417810252730352340754437433890686716634148541316116437398844056594388974943451252693298826461268195957995233204726580360518120722831475047238848520121974861190434089882052536062527552074746737392878272219813609847822641000374148713270431417107701343460532465568376598334041181827015065533900044557011648000528466905170826934678563716604346912017910948004696319141870114526815224456432832395889026710524811740032711882587929506973642267574179895747116940093482230760556115941144091916446754587172633329715568070657689791394343901778058499681994404972002585617567896538181136785927626437478787592006430142954410490692356785698559644321807726032253269544115218475243205442713311676969122666537145560084133862349562008440091733151012449851234288766580473174731625512554546902039193169769111453131416686283066149476328354180826442038532515883648602007655712172395541266432552137033708105602341004365051367422036097209403287883642447893808711637303918526911977444016340845604094148950540134588310847971891118813007073047958837518038702667255496843175440515751387220019188888225509081974873522272690849139199089521105774909974989857689914560595659621869062248419185753051018250096381690265047817067556811134058718664474519626520018419191373814294102382720688029185564666122404247839203613263102945779229436404198268095312784134780858344009303474538424982154356049247754822330779945259974277064815282302372327351526104690184978151628756578431233799741186072154073689492048623644349866103655713004780409117627629375452837004753071965892450543600792469074918268320684205033256284578160824914542614450269580818170474593429375828822006192273266663523034559465562060807967312517415156390672400546512888220613792507996027216019879538800195217291178027173789052816086826633515495980843918512177698627549182066630254157104243369196620802425007156719689384043327409536753514309870021147455146312470256426581714508302065650360885005652617293190085224180430541462497495090592940010614280275548506280968513721693738270892407374429846492773182142263411316319092417204720825325244407939394255691327709106967322700584977157213997356556294143385530120052828671122008997067708458637236816128384460184662369223512719505505016469333858807697332636186759779393508557343193806907428483241581545959400229395914541886207490106414273576827573080643166134704895035783625713605327775830056823653831029333772154861764452648631603373403394632013230845479310897257218879778407928185843997708108573232900635390109322867176481198898973343102903255264301769533051237822685230013537607190337370617815152297549854214378453640018805");
    PrivateKey key = shard1.calcPrivateKey(shard2);

    assertEquals(key, sham.priv);


    String cipherText = readFromFile("CipherText.TXT");

    byte[] hawaii = "hawaii".getBytes(StandardCharsets.UTF_8);
    String encoded = Base64.getEncoder().encodeToString(hawaii);
    byte[] newHawaii = Base64.getDecoder().decode(encoded);
    //assertEquals(hawaii, newHawaii);

    System.out.println("Cipher text: " + cipherText);

    //assertEquals(sham.cipherText, decoded);
    assertEquals(sham.decode(sham.priv), sham.decode(key) );

    System.out.println("Decoded word: " + sham.decode(sham.priv));
    System.out.println("Decoded word2: " + sham.decode(key));
  }

  /**
   * Reads everything from a given file.
   * @param fileName String representation of the filename
   * @return String everything in the file
   */
  private String readFromFile(String fileName) {
    String ret = "";
    try {
      File file = new File(fileName);
      Scanner sc = new Scanner(file);

      while (sc.hasNextLine()) {
        ret = ret + sc.nextLine();
      }
    } catch (IOException ex) {
      ex.printStackTrace();
    }
    return ret;
  }
}